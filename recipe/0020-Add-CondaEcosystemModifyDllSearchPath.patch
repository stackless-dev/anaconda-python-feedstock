From 5af2d4b6c1d826bbe8ed24c15523e59bdd2474d8 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Fri, 25 Jan 2019 22:54:57 +0000
Subject: [PATCH 20/20] Add CondaEcosystemModifyDllSearchPath()

This changes the DLL search order so that C:\Windows\System32 does not
get searched in before entries in PATH.
---
 Modules/main.c | 151 +++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 151 insertions(+)

diff --git a/Modules/main.c b/Modules/main.c
index 5076d5442c..012228a289 100644
--- a/Modules/main.c
+++ b/Modules/main.c
@@ -13,6 +13,10 @@
 #ifdef HAVE_FCNTL_H
 #include <fcntl.h>
 #endif
+#  include <shlwapi.h>
+#  include <string.h>
+#  include <malloc.h>
+#  include <libloaderapi.h>
 #endif
 
 #ifdef _MSC_VER
@@ -343,6 +347,150 @@ run_file(FILE *fp, const wchar_t *filename, PyCompilerFlags *p_cf)
 }
 
 
+#ifdef MS_WINDOWS
+/* Please do not remove this function. It is needed for testing
+   CondaEcosystemModifyDllSearchPath(). */
+
+/*
+void LoadAndUnloadTestDLL(wchar_t* test_dll)
+{
+    wchar_t test_path[MAX_PATH + 1];
+    HMODULE hDLL = LoadLibraryExW(&test_dll[0], NULL, 0);
+    if (hDLL == NULL)
+    {
+        wchar_t err_msg[256];
+        DWORD err_code = GetLastError();
+        FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
+            NULL, err_code, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
+            err_msg, (sizeof(err_msg) / sizeof(wchar_t)), NULL);
+        wprintf(L"LoadAndUnloadTestDLL() :: ERROR :: Failed to load %ls, error is: %ls\n", &test_dll[0], &err_msg[0]);
+    }
+    GetModuleFileNameW(hDLL, &test_path[0], MAX_PATH);
+    wprintf(L"LoadAndUnloadTestDLL() :: %ls loaded from %ls\n", &test_dll[0], &test_path[0]);
+    if (FreeLibrary(hDLL) == 0)
+    {
+        wchar_t err_msg[256];
+        DWORD err_code = GetLastError();
+        FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
+            NULL, err_code, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
+            err_msg, (sizeof(err_msg) / sizeof(wchar_t)), NULL);
+        wprintf(L"LoadAndUnloadTestDLL() :: ERROR :: Failed to free %ls, error is: %ls\n", &test_dll[0], &err_msg[0]);
+    }
+}
+*/
+
+/*
+    Unless CONDA_DISABLE_DLL_SEARCH_MODIFICATION is set (to anything at all!)
+    this function will modify the DLL search path so that C:\Windows\System32
+    does not appear before entries in PATH. If it does appear in PATH then it
+    gets added at the position it was in in PATH.
+
+    This is achieved via a call to SetDefaultDllDirectories() then calls to
+    AddDllDirectory() for each entry in PATH. We also take the opportunity to
+    clean-up these PATH entries such that any '/' are replaced with '\', no
+    double quotes occour and no PATH entry ends with '\'.
+
+    Caution: Microsoft's documentation says that the search order of entries
+    passed to AddDllDirectory is not respected and arbitrary. I do not think
+    this will be the case but it is worth bearing in mind.
+*/
+
+int CondaEcosystemModifyDllSearchPath()
+{
+    if (_wgetenv(L"CONDA_DLL_SEARCH_MODIFICATION_DISABLE") == NULL)
+    {
+        int debug_it = _wgetenv(L"CONDA_DLL_SEARCH_MODIFICATION_DEBUG") ? 1 : 0;
+        typedef void (WINAPI *ADD)(PCWSTR NewDirectory);
+        typedef void (WINAPI *SDDD)(DWORD DirectoryFlags);
+        ADD pADD;
+        SDDD pSDDD;
+        pADD = (ADD)GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "AddDllDirectory");
+        pSDDD = (SDDD)GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "SetDefaultDllDirectories");
+        if (pADD == NULL || pSDDD == NULL)
+        {
+            if (debug_it)
+                wprintf(L"CondaEcosystemModifyDllSearchPath() :: WARNING :: Please install KB2533623 from http://go.microsoft.com/fwlink/p/?linkid=217865\n"\
+                        L"CondaEcosystemModifyDllSearchPath() :: WARNING :: to improve conda ecosystem DLL isolation");
+            return 1;
+        }
+
+        const wchar_t *path_env = _wgetenv(L"PATH");
+        if (path_env != NULL)
+        {
+            if (debug_it) wprintf(L"CondaEcosystemModifyDllSearchPath() :: PATH=%ls\n\b", path_env);
+            size_t len = wcslen(path_env);
+            wchar_t *path = (wchar_t *)alloca((len + 1) * sizeof(wchar_t));
+            if (path != NULL)
+            {
+                memcpy(path, path_env, (len + 1) * sizeof(wchar_t));
+                /* Convert any / to \ */
+                wchar_t *path_end;
+                while ((path_end = wcschr(path, L'/')))
+                    *path_end = L'\\';
+                /* Remove all double quotes */
+                while ((path_end = wcschr(path, L'"')))
+                    memmove(path_end, path_end + 1, len-- - (path_end - path));
+                /* Remove all double ';' */
+                while ((path_end = wcsstr(path, L";;")))
+                    memmove(path_end, path_end + 1, len-- - (path_end - path));
+
+                if (wcslen(path) == 0)
+                    return 2;
+
+                /* Count the number of path entries */
+                ssize_t num_entries = 1;
+                path_end = path;
+                while ((path_end = wcschr(path_end, L';')))
+                {
+                    ++num_entries;
+                    ++path_end;
+                }
+
+                wchar_t **path_entries = (wchar_t **)alloca((num_entries) * sizeof(wchar_t *));
+                if (path_entries != NULL)
+                {
+                    path_end = wcschr(path, L';');
+                    /* It does not matter what flags are passed to SetDefaultDllDirectories(), only that more than
+                       one flag is passed; this seems like an odd API decision.
+                    */
+                    pSDDD(LOAD_LIBRARY_SEARCH_DEFAULT_DIRS);
+                    ssize_t entry_num = 0;
+                    while (path != NULL)
+                    {
+                        if (path_end != NULL)
+                        {
+                            *path_end = L'\0';
+                            /* Hygiene, no \ at the end */
+                            while (path_end > path && path_end[-1] == L'\\')
+                            {
+                                --path_end;
+                                *path_end = L'\0';
+                            }
+                        }
+                        if (wcslen(path) != 0)
+                            path_entries[entry_num++] = path;
+                        path = path_end;
+                        if (path != NULL)
+                        {
+                            while (*path == L'\0')
+                                ++path;
+                            path_end = wcschr(path, L';');
+                        }
+                    }
+                    for (ssize_t i = num_entries - 1; i > -1; --i)
+                    {
+                        if (debug_it) wprintf(L"CondaEcosystemModifyDllSearchPath() :: AddDllDirectory(%ls)\n", path_entries[i]);
+                        pADD(path_entries[i]);
+                    }
+                }
+            }
+        }
+    }
+    return 0;
+}
+#endif
+
+
 /* Main program */
 
 int
@@ -369,6 +517,9 @@ Py_Main(int argc, wchar_t **argv)
     PyObject *warning_option = NULL;
     PyObject *warning_options = NULL;
 
+#ifdef MS_WINDOWS
+    CondaEcosystemModifyDllSearchPath();
+#endif
     cf.cf_flags = 0;
 
     orig_argc = argc;           /* For Py_GetArgcArgv() */
-- 
2.17.2 (Apple Git-113)

